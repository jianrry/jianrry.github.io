<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.jianrry.com</id>
    <title>Jianrry</title>
    <updated>2021-05-27T09:08:22.819Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.jianrry.com"/>
    <link rel="self" href="https://blog.jianrry.com/atom.xml"/>
    <logo>https://blog.jianrry.com/images/avatar.png</logo>
    <icon>https://blog.jianrry.com/favicon.ico</icon>
    <rights>All rights reserved 2021, Jianrry</rights>
    <entry>
        <title type="html"><![CDATA[Markdown 简明教程]]></title>
        <id>https://blog.jianrry.com/post/markdown-tutorial/</id>
        <link href="https://blog.jianrry.com/post/markdown-tutorial/">
        </link>
        <updated>2021-05-26T08:00:10.000Z</updated>
        <summary type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的HTML文档。在很多网站得到了广泛的应用，比如说 GitHub 知乎 简书等，人们使用它发表文章，你现在看到的这一篇文章就是使用 Markdown 创作的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的HTML文档。在很多网站得到了广泛的应用，比如说 GitHub 知乎 简书等，人们使用它发表文章，你现在看到的这一篇文章就是使用 Markdown 创作的。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#%E6%A0%87%E9%A2%98">标题</a></li>
<li><a href="#%E5%AD%97%E4%BD%93">字体</a>
<ul>
<li><a href="#%E7%B2%97%E4%BD%93">粗体</a></li>
<li><a href="#%E6%96%9C%E4%BD%93">斜体</a></li>
<li><a href="#%E7%B2%97%E4%BD%93%E6%96%9C%E4%BD%93">粗体+斜体</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E7%BA%BF">删除线</a></li>
<li><a href="#%E4%B8%8B%E5%88%92%E7%BA%BF">下划线</a></li>
<li><a href="#%E5%88%86%E5%89%B2%E7%BA%BF">分割线</a></li>
</ul>
</li>
<li><a href="#%E5%88%97%E8%A1%A8">列表</a>
<ul>
<li><a href="#%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8">无序列表</a></li>
<li><a href="#%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">有序列表</a></li>
<li><a href="#%E5%88%97%E8%A1%A8%E5%B5%8C%E5%A5%97">列表嵌套</a></li>
</ul>
</li>
<li><a href="#%E5%BC%95%E7%94%A8">引用</a>
<ul>
<li><a href="#%E5%BC%95%E7%94%A8-2">引用</a></li>
<li><a href="#%E5%BC%95%E7%94%A8%E5%B5%8C%E5%A5%97">引用嵌套</a></li>
</ul>
</li>
<li><a href="#%E4%BB%A3%E7%A0%81">代码</a>
<ul>
<li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%9D%97">代码块</a></li>
</ul>
</li>
<li><a href="#%E9%93%BE%E6%8E%A5">链接</a>
<ul>
<li><a href="#%E9%93%BE%E6%8E%A5-2">链接</a></li>
<li><a href="#%E9%AB%98%E7%BA%A7%E9%93%BE%E6%8E%A5">高级链接</a></li>
</ul>
</li>
<li><a href="#%E5%9B%BE%E7%89%87">图片</a></li>
<li><a href="#%E8%A1%A8%E6%A0%BC">表格</a></li>
</ul>
</li>
</ul>
</p>
<h2 id="标题">标题</h2>
<p>语法：使用 <code>#</code> 表示标题，1个<code>#</code>代表一级标题，2个<code>#</code>代表二级标题，<code>#</code>后面有一个空格，以此类推，最多六级标题。</p>
<p>实例：<code># 这是一个一级标题</code></p>
<p>预览：</p>
<figure data-type="image" tabindex="1"><img src="https://drive.jianrry.com/image/markdown-header1.jpg?raw" alt="" loading="lazy"></figure>
<h2 id="字体">字体</h2>
<h3 id="粗体">粗体</h3>
<p>语法：使用 <code>**文本**</code>表示粗体</p>
<p>实例：<code>**这是一行粗体**</code></p>
<p>预览：</p>
<p><strong>这是一行粗体</strong></p>
<h3 id="斜体">斜体</h3>
<p>语法：使用<code>*文本*</code>表示斜体</p>
<p>实例：<code>*这是一行斜体*</code></p>
<p>预览：</p>
<p><em>这是一行斜体</em></p>
<h3 id="粗体斜体">粗体+斜体</h3>
<p>语法：使用<code>***文本***</code>表示粗体+斜体</p>
<p>实例：<code>***这一行是粗体+斜体***</code></p>
<p>预览：</p>
<p><em><strong>这一行是粗体+斜体</strong></em></p>
<h3 id="删除线">删除线</h3>
<p>语法：使用<code>~~文本~~</code>表示删除线</p>
<p>实例：<code>~~这一行是删除线~~</code></p>
<p>预览：</p>
<p><s>这一行是删除线</s></p>
<h3 id="下划线">下划线</h3>
<p>语法：markdown 本身不支持下划线，但可以使用 HTML 中的<code>&lt;u&gt;</code>标签实现</p>
<p>实例：<code>&lt;u&gt;这一行是下划线&lt;/u&gt;</code></p>
<p>预览：</p>
<p><u>这一行是下划线</u></p>
<h3 id="分割线">分割线</h3>
<p>语法：可以使用3个以上的 <code>*</code> <code>-</code> <code>_</code> 表示分割线。行内可以插入空格，但不能有其他东西。</p>
<p>实例：<code>***</code></p>
<p>预览：</p>
<hr>
<h2 id="列表">列表</h2>
<h3 id="无序列表">无序列表</h3>
<p>语法：使用<code>*</code> <code>+</code> <code>-</code>表示无序列表，<code>*</code> <code>+</code> <code>-</code>后面有一个空格</p>
<p>实例：</p>
<pre><code>+ 这是一行无序列表1
+ 这是一行无序列表2
+ 这是一行无序列表3
</code></pre>
<p>预览：</p>
<ul>
<li>这是一行无序列表1</li>
<li>这是一行无序列表2</li>
<li>这是一行无序列表3</li>
</ul>
<h3 id="有序列表">有序列表</h3>
<p>语法：使用 阿拉伯数字 + <code>.</code> 表示有序列表， <code>.</code>后面有一个空格</p>
<p>实例：</p>
<pre><code>1. 这是一行有序列表1
2. 这是一行有序列表2
3. 这是一行有序列表3
</code></pre>
<p>预览：</p>
<ol>
<li>这是一行有序列表1</li>
<li>这是一行有序列表2</li>
<li>这是一行有序列表3</li>
</ol>
<h3 id="列表嵌套">列表嵌套</h3>
<p>语法：只需要在子列表前加上4个空格即可</p>
<p>实例：</p>
<pre><code>+ 第一项
    1. 子列表1
    2. 子列表2
    3. 子列表3
+ 第二项
    1. 子列表1
    2. 子列表2
    3. 子列表3
+ 第三项
    1. 子列表1
    2. 子列表2
    3. 子列表3
</code></pre>
<p>预览：</p>
<ul>
<li>第一项
<ol>
<li>子列表1</li>
<li>子列表2</li>
<li>子列表3</li>
</ol>
</li>
<li>第二项
<ol>
<li>子列表1</li>
<li>子列表2</li>
<li>子列表3</li>
</ol>
</li>
<li>第三项
<ol>
<li>子列表1</li>
<li>子列表2</li>
<li>子列表3</li>
</ol>
</li>
</ul>
<h2 id="引用">引用</h2>
<h3 id="引用-2">引用</h3>
<p>语法：在引用的段落开头加上<code>&gt;</code>，<code>&gt;</code>后面有一个空格</p>
<p>实例：<code>&gt; 这一行是引用的文本</code></p>
<p>预览：</p>
<blockquote>
<p>这一行是引用的文本</p>
</blockquote>
<h3 id="引用嵌套">引用嵌套</h3>
<p>语法：1个 <code>&gt;</code> 是第1层（即最外层），2个 <code>&gt;</code> 是第二层，以此类推</p>
<p>实例：</p>
<pre><code>&gt; 最外层
&gt;&gt; 第二层 
&gt;&gt;&gt; 第三层
</code></pre>
<p>预览：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第二层</p>
<blockquote>
<p>第三层</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="代码">代码</h2>
<h3 id="代码-2">代码</h3>
<p>语法：使用  Tab 键 上面的  ` 键 表示代码</p>
<p>实例：</p>
<pre><code>`Hello World!`
</code></pre>
<p>预览：</p>
<p><code>Hello World!</code></p>
<h3 id="代码块">代码块</h3>
<p>语法：使用 3 个 Tab 键 上面的 ` 键 表示代码块，可以指定编程语言</p>
<p>实例：</p>
<figure data-type="image" tabindex="2"><img src="https://drive.jianrry.com/image/markdown-code-block.jpg?raw" alt="" loading="lazy"></figure>
<p>预览：</p>
<pre><code class="language-javascript">$(document).ready(function () {
    alert('Hello World!');
});
</code></pre>
<h2 id="链接">链接</h2>
<h3 id="链接-2">链接</h3>
<p>语法：<code>[链接描述]</code> +<code>(链接地址)</code>表示链接，链接描述可以为空，链接地址可以是外链，也可以是本地文件地址</p>
<p>实例：</p>
<pre><code>[Jianrry 的博客](https://blog.jianrry.com)
</code></pre>
<p>预览：</p>
<p><a href="https://blog.jianrry.com">Jianrry 的博客</a></p>
<h3 id="高级链接">高级链接</h3>
<p>语法：<code>[链接描述][链接变量名]</code>表示链接，通过变量设置一个链接，链接变量一般在文章末尾赋值</p>
<p>实例：</p>
<pre><code>欢迎访问我的博客：[Jianrry 的博客][jianrry]

[jianrry]: https://blog.jianrry.com
</code></pre>
<p>预览：</p>
<p>欢迎访问我的博客：<a href="https://blog.jianrry.com">Jianrry 的博客</a></p>
<h2 id="图片">图片</h2>
<p>语法：<code>!</code> + <code>[图片描述]</code> + <code>(图片地址)</code>表示图片，图片地址可以为空，图片地址可以是外链，也可以是本地图片的地址</p>
<p>实例：</p>
<pre><code>![Jianrry 的头像](https://drive.jianrry.com/image/avatar.jpg?raw)
</code></pre>
<p>预览：</p>
<figure data-type="image" tabindex="3"><img src="https://drive.jianrry.com/image/avatar.jpg?raw" alt="Jianrry 的头像" loading="lazy"></figure>
<h2 id="表格">表格</h2>
<p>语法：使用 <code>-</code>分割表头和普通行，使用<code>|</code>分割单元格</p>
<p><code>:----</code> 表示左对齐<br>
<code>----:</code> 表示右对齐<br>
<code>:----:</code> 表示居中</p>
<p>实例：</p>
<pre><code>| 姓名| 性别 | 年龄 | 班级 |
| ---- | ---- | ---- | ---- |
| 张三 | 男 | 12 | 初一(1)班 |
| 李四 | 男 | 13 | 初二(1)班 |
| 王五 | 男 | 14 | 初三(3)班 |
</code></pre>
<p>预览：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>性别</th>
<th>年龄</th>
<th>班级</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td>男</td>
<td>12</td>
<td>初一(1)班</td>
</tr>
<tr>
<td>李四</td>
<td>男</td>
<td>13</td>
<td>初二(1)班</td>
</tr>
<tr>
<td>王五</td>
<td>男</td>
<td>14</td>
<td>初三(3)班</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[九张羊皮纸联机脚本]]></title>
        <id>https://blog.jianrry.com/post/dummy_9parchments/</id>
        <link href="https://blog.jianrry.com/post/dummy_9parchments/">
        </link>
        <updated>2021-05-23T05:12:10.000Z</updated>
        <summary type="html"><![CDATA[<p>此脚本仅适用于 Steam 平台的 Nine Parchments（九张羊皮纸），可以减少多人游戏时的频繁掉线的现象，感谢 <a href="https://steamcommunity.com/profiles/76561197992455493">BSoD</a>提供的<a href="https://gist.github.com/BSoD123456/4161c185e4f9d0bfa6a4b5ea41cab21f">脚本</a>。</p>
]]></summary>
        <content type="html"><![CDATA[<p>此脚本仅适用于 Steam 平台的 Nine Parchments（九张羊皮纸），可以减少多人游戏时的频繁掉线的现象，感谢 <a href="https://steamcommunity.com/profiles/76561197992455493">BSoD</a>提供的<a href="https://gist.github.com/BSoD123456/4161c185e4f9d0bfa6a4b5ea41cab21f">脚本</a>。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#step1%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85-python27">Step1：下载并安装 Python2.7</a></li>
<li><a href="#step2%E4%BF%AE%E6%94%B9-host-%E6%96%87%E4%BB%B6">Step2：修改 host 文件</a></li>
<li><a href="#step3%E5%88%B7%E6%96%B0-dns-%E7%BC%93%E5%AD%98">Step3：刷新 DNS 缓存</a></li>
<li><a href="#step4-%E4%B8%8B%E8%BD%BD%E8%84%9A%E6%9C%AC">Step4： 下载脚本</a></li>
<li><a href="#step5%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC">Step5：运行脚本</a></li>
</ul>
</li>
</ul>
</p>
<h2 id="step1下载并安装-python27">Step1：下载并安装 Python2.7</h2>
<p>Python2.7 官网下载：<a href="https://www.python.org/ftp/python/2.7/python-2.7.amd64.msi">https://www.python.org/ftp/python/2.7/python-2.7.amd64.msi</a></p>
<h2 id="step2修改-host-文件">Step2：修改 host 文件</h2>
<p>以管理员身份运行记事本，编辑 host（C:\Windows\System32\drivers\etc\hosts） 文件。</p>
<p>在文件的末尾添加下面的一行，然后保存。</p>
<pre><code>127.0.0.1 master.frozenbyte-online.com
</code></pre>
<h2 id="step3刷新-dns-缓存">Step3：刷新 DNS 缓存</h2>
<p>同时按下 windows 键 和 r 键，输入 <code>cmd</code>，然后回车，打开命令提示符。</p>
<p>输入下面的代码，然后回车。</p>
<pre><code>ipconfig /flushdns
</code></pre>
<p>如果你不会刷新 dns 缓存，你可以重启电脑，也可以达到同样效果。</p>
<h2 id="step4-下载脚本">Step4： 下载脚本</h2>
<p>复制并黏贴下面的代码到记事本，然后另存为<code>dummy_9parchments.py</code>。</p>
<pre><code>#! python2
# -*- coding: utf-8 -*-

# 九张羊皮纸 STEAM版用 联机辅助脚本
# 本脚本用于，减少STEAM游戏九张羊皮纸在线游戏时的频繁掉线现象。

# 安装方法:
# 1, 请去Python官方网站下载Python 2.7版安装程序并安装。
#    版本一定必须是2.7或其子版本，若使用3以上版本将无法正确运行。
# 2, 请修改操作系统中的HOSTS文件，增加条目: 127.0.0.1 master.frozenbyte-online.com
# 3, 保存本脚本到本地任意位置。

# 使用方法:
# 1, 直接双击运行本脚本。
# 2, 直接打开游戏，新建立一个在线游戏的主机，然后切出游戏查看本脚本的运行窗口。
#    如果窗口中有4个计数，并且有计数在增加，则说明脚本一切运行正常。
# 3, 正常开始联机游戏吧。
# 4, 游戏结束后，在脚本窗口按ctrl+c来结束脚本，或者直接关闭窗口。

# 注意事项:
# 1, 当修改完操作系统中的HOSTS文件后，该游戏的联机模式便 必 须 使用本脚本才能联机。
#    若想恢复以前的直接联机方式，仅需在HOSTS中删除之前添加的条目即可。
# 2, 除了手动修改的HOSTS外，本脚本不注册任何系统资源，可随时直接删除。
# 3, 本脚本以及HOSTS设置，仅影响该游戏。不影响其他游戏联机。
#    但未经测试，本脚本有可能会影响同厂商的其他游戏联机。
#    如果同厂其他游戏联机出现问题，请如条目1所述恢复操作系统中的HOSTS文件即可。
# 4，即使使用了本脚本，依旧有可能出现掉线现象。
#    但是这就是其他因素导致的，而非大多数人碰到的服务器检测信号丢包问题。

# 原理简介：
# 本脚本在本地系统建立了一个连接游戏客户端与远在芬兰的官方联机服务器之间的中继服务器。
# 对于服务器方面的数据，本脚本直接透传转发，对服务器上下行数据没有任何修改，不属于外挂范畴。
# 对于游戏客户端方面的数据，本脚本伪造了一个服务器上周期性发送的检测玩家在线状态的心跳信号，
# 用于欺骗游戏客户端，无视一切网络传输导致的心跳丢包，而使其不会随意掉线。

# 免责声明：
# 本脚本仅仅用于技术交流。
# 任何人基于任何目的使用本脚本带来的任何后果，作者皆不承担任何责任。
# 若无法同意上述声明，请不要使用本脚本。

import sys
import socket
import SocketServer
import threading
from time import sleep

dst_url = 'master.frozenbyte-online.com'
#dst_ip = socket.gethostbyname(dst_url)
dst_ip = '192.81.220.187'
dst_port = 27300

def run_thr_svr(svr):
    thr = threading.Thread(target = svr.serve_forever)
    thr.daemon = True
    thr.start()
    return thr

def send_unblock(s):
    try:
        addr = s.getsockname()
    except socket.error as e:
        if e.errno == 10022:
            return
        else:
            raise
    s.sendto('unblock', ('localhost', addr[1]))

class dummy_relay_9p(SocketServer.BaseRequestHandler):

    DST_ADDR = (dst_ip, dst_port)
    DST_SOCK = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    STATUS = {'s_relay': 0, 'r_relay': 0, 's_ack': 0, 'r_ack': 0}

    def print_status(self):
        sys.stdout.write('status: {:s}'.format(self.STATUS) + '\r')
        sys.stdout.flush()

    def handle(self):
        self.print_status()
        d = self.request[0]
        s = self.request[1]
        nd, dr = self.data_mod(d)
        if not nd:
            return
        send_unblock(self.DST_SOCK)
        #print 'send to', self.DST_ADDR
        self.DST_SOCK.sendto(nd, self.DST_ADDR)
        if dr:
            #print 'resend to', self.client_address
            s.sendto(dr, self.client_address)
        while True:
            try:
                r, dsrv = self.DST_SOCK.recvfrom(4096)
            except socket.error as e:
                if e.errno == 10054:
                    return
                else:
                    raise
            if dsrv[0] == '127.0.0.1':
                #print 'r-fresh'
                return
            nr = self.recv_mod(r)
            if nr:
                s.sendto(nr, self.client_address)

    D_BEAT_ACK = bytearray([0xcb, 0xbd, 0xfd, 0x20, 0xf5])
    
    def data_mod(self, data):
        if bytearray(data) == self.D_BEAT_ACK:
            self.STATUS['s_ack'] += 1
            return data, data
        else:
            self.STATUS['s_relay'] += 1
            return data, None

    def recv_mod(self, data):
        bdata = bytearray(data)
        if len(bdata) &gt;= 2 and bdata[:2] == bytearray([0xcf, 0x00]):
            del self.D_BEAT_ACK[:]
            self.D_BEAT_ACK.extend(bytearray([0xcb]) + bdata[2:])
        if bdata == self.D_BEAT_ACK:
            self.STATUS['r_ack'] += 1
            return None
        else:
            self.STATUS['r_relay'] += 1
            return data

def stop_serve(svr):
    send_unblock(svr.RequestHandlerClass.DST_SOCK)
    sleep(.1)
    svr.shutdown()
    svr.server_close()

if __name__ == '__main__':
    print 'dummy for', dst_url, dst_ip, dst_port
    c_9p = SocketServer.ThreadingUDPServer(('', dst_port), dummy_relay_9p)
    run_thr_svr(c_9p)

    try:
        while True:
            sleep(1)
    except KeyboardInterrupt:
        stop_serve(c_9p)
        print '\nclose'
</code></pre>
<h2 id="step5运行脚本">Step5：运行脚本</h2>
<ol>
<li>直接双击运行本脚本。</li>
<li>直接打开游戏，新建立一个在线游戏的主机，然后切出游戏查看本脚本的运行窗口。<br>
如果窗口中有4个计数，并且有计数在增加，则说明脚本一切运行正常。</li>
<li>正常开始联机游戏吧。</li>
<li>游戏结束后，在脚本窗口按ctrl+c来结束脚本，或者直接关闭窗口。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OneManager+Heroku+CloudFlare Workers 免费搭建个人网盘]]></title>
        <id>https://blog.jianrry.com/post/build-a-personal-netdisc-by-onemanager-and-heroku-and-cloudflare-workers/</id>
        <link href="https://blog.jianrry.com/post/build-a-personal-netdisc-by-onemanager-and-heroku-and-cloudflare-workers/">
        </link>
        <updated>2021-05-16T16:01:06.000Z</updated>
        <summary type="html"><![CDATA[<p>OneManager 是一个目录索引程序，可以部署到 Heroku 上，通过 CloudFlare Workers 反向代理进行访问。你可以通过 OneManger 上传、下载文件，文件存储在 OneDrive，从而实现免费搭建个人网盘。</p>
]]></summary>
        <content type="html"><![CDATA[<p>OneManager 是一个目录索引程序，可以部署到 Heroku 上，通过 CloudFlare Workers 反向代理进行访问。你可以通过 OneManger 上传、下载文件，文件存储在 OneDrive，从而实现免费搭建个人网盘。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#heroku">Heroku</a>
<ul>
<li><a href="#step1%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84-heroku-%E8%B4%A6%E5%8F%B7">Step1：登陆你的 Heroku 账号</a></li>
<li><a href="#step2%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8">Step2：创建一个应用</a></li>
<li><a href="#step3%E7%94%9F%E6%88%90-api-%E5%AF%86%E9%92%A5">Step3：生成 API 密钥</a></li>
</ul>
</li>
<li><a href="#onemanager">OneManager</a>
<ul>
<li><a href="#step1%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">Step1：开始安装应用程序</a></li>
<li><a href="#step2%E8%AE%BE%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%86%E7%A0%81">Step2：设置管理员密码</a></li>
<li><a href="#step3%E7%AE%A1%E7%90%86%E5%91%98%E7%99%BB%E9%99%86">Step3：管理员登陆</a></li>
<li><a href="#step4%E6%B7%BB%E5%8A%A0-onedrive">Step4：添加 OneDrive</a></li>
<li><a href="#step5%E8%AF%B7%E6%B1%82%E5%BE%81%E5%BE%97%E7%9A%84%E8%AE%B8%E5%8F%AF">Step5：请求征得的许可</a></li>
</ul>
</li>
<li><a href="#onedrive">OneDrive</a>
<ul>
<li><a href="#step1%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84-microsoft-%E8%B4%A6%E5%8F%B7">Step1：登陆你的 Microsoft 账号</a></li>
<li><a href="#step2%E6%B3%A8%E5%86%8C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">Step2：注册应用程序</a></li>
<li><a href="#step3%E8%8E%B7%E5%8F%96-client_id-%E5%92%8C-client_secret">Step3：获取 client_id 和 client_secret</a></li>
</ul>
</li>
<li><a href="#cloudflare-workers">CloudFlare Workers</a>
<ul>
<li><a href="#step1%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84-cloudflare-%E8%B4%A6%E5%8F%B7">Step1：登陆你的 CloudFlare 账号</a></li>
<li><a href="#step2%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-cloudflare-worker">Step2：创建一个 CloudFlare Worker</a></li>
<li><a href="#step3%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA-cloudflare-%E8%B7%AF%E7%94%B1">Step3：添加一个 CloudFlare 路由</a></li>
<li><a href="#step4%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D">Step4：自定义域名</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h2 id="heroku">Heroku</h2>
<h3 id="step1登陆你的-heroku-账号">Step1：登陆你的 Heroku 账号</h3>
<p>打开<a href="https://id.heroku.com/login">官网</a>，登录你的 Heroku 账号（如果没有，就注册一个 Heroku 账号）。</p>
<figure data-type="image" tabindex="1"><img src="https://drive.jianrry.com/image/heroku-sign-in.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step2创建一个应用">Step2：创建一个应用</h3>
<p>点击<a href="https://heroku.com/deploy?template=https://github.com/qkqpttgf/OneManager-php">此处</a>，以 OneManager 为模板创建一个 Heroku 应用。</p>
<figure data-type="image" tabindex="2"><img src="https://drive.jianrry.com/image/heroku-create-new-app.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step3生成-api-密钥">Step3：生成 API 密钥</h3>
<p>打开<a href="https://dashboard.heroku.com/account">Heroku 账户页面</a>，滑动到底部。点击“Regenerate API key”，重新生成 API 密钥。</p>
<figure data-type="image" tabindex="3"><img src="https://drive.jianrry.com/image/heroku-regenerate-api-key.jpg?raw" alt="" loading="lazy"></figure>
<p>然后点击“Reveal”按钮，你的 API 密钥就会显示，将 API 密钥保存到记事本，后面会用到。</p>
<h2 id="onemanager">OneManager</h2>
<h3 id="step1开始安装应用程序">Step1：开始安装应用程序</h3>
<p>访问 Heroku 提供的二级域名(https://appname.herokuapp.com/ ，appname 为你设置的应用名)，点击“开始安装应用程序”，绑定你的 OneDrive。</p>
<figure data-type="image" tabindex="4"><img src="https://drive.jianrry.com/image/heroku-link-onedrive.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step2设置管理员密码">Step2：设置管理员密码</h3>
<p>依次输入 API 密钥 和 管理员密码（自己设置一个密码，密码不能为空），最后点击“确认”按钮。</p>
<figure data-type="image" tabindex="5"><img src="https://drive.jianrry.com/image/heroku-link-onedrive2.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step3管理员登陆">Step3：管理员登陆</h3>
<p>稍后会跳转到一个空白页面，点击“登陆”按钮，输入你的管理员密码进行登陆。</p>
<figure data-type="image" tabindex="6"><img src="https://drive.jianrry.com/image/heroku-link-onedrive3.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step4添加-onedrive">Step4：添加 OneDrive</h3>
<p>点击左上角的“管理”按钮，然后点击“设置”，进入 OneManager 设置页面。点击“添加盘”按钮，绑定你的 OneDrive。</p>
<figure data-type="image" tabindex="7"><img src="https://drive.jianrry.com/image/heroku-link-onedrive4.jpg?raw" alt="" loading="lazy"></figure>
<p>选择 OneDrive 对应的账号类型，我选择的是 MS 国际版，然后勾选“用自己申请的应用ID与机密，不用OneManager默认的”。</p>
<figure data-type="image" tabindex="8"><img src="https://drive.jianrry.com/image/heroku-link-onedrive5.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step5请求征得的许可">Step5：请求征得的许可</h3>
<p>如何获取client_id 和 client_secret，后面会讲到，这一步暂停。等获取 client_id 和 client_secret 之后，再回到这一步。</p>
<p>依次输入你的 client_id 和 client_secret ，最后点击“确认”按钮。然后会跳转到一个新的页面，勾选“代表组织同意”，最后点击“接受”按钮。</p>
<figure data-type="image" tabindex="9"><img src="https://drive.jianrry.com/image/heroku-link-onedrive6.jpg?raw" alt="" loading="lazy"></figure>
<p>然后根据你的实际情况进行选择，最后点击“确认”按钮。</p>
<figure data-type="image" tabindex="10"><img src="https://drive.jianrry.com/image/heroku-link-onedrive7.jpg?raw" alt="" loading="lazy"></figure>
<h2 id="onedrive">OneDrive</h2>
<h3 id="step1登陆你的-microsoft-账号">Step1：登陆你的 Microsoft 账号</h3>
<p>点击<a href="https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps">此处</a>，登陆你的 Microsoft 账号（如果没有，就注册一个 Microsoft 账号）。</p>
<figure data-type="image" tabindex="11"><img src="https://drive.jianrry.com/image/microsoft-azure-sign-in.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step2注册应用程序">Step2：注册应用程序</h3>
<p>点击“新注册”按钮，注册一个应用程序。</p>
<figure data-type="image" tabindex="12"><img src="https://drive.jianrry.com/image/microsoft-azure-register-app.jpg?raw" alt="" loading="lazy"></figure>
<p>输入名称，选择受支持的帐户类型，然后填写重定向 URI，最后点击“注册”按钮。</p>
<figure data-type="image" tabindex="13"><img src="https://drive.jianrry.com/image/microsoft-azure-register-app2.jpg?raw" alt="" loading="lazy"></figure>
<p>**注意事项：重定向 URL 必须是 https://scfonedrive.github.io/ **</p>
<h3 id="step3获取-client_id-和-client_secret">Step3：获取 client_id 和 client_secret</h3>
<p>复制“应用程序(客户端) ID（client_id）”的值，保存到记事本上，后面会用到。</p>
<figure data-type="image" tabindex="14"><img src="https://drive.jianrry.com/image/microsoft-azure-register-app3.jpg?raw" alt="" loading="lazy"></figure>
<p>选中左侧的证书和密码，添加客户端密码。说明这一行填写<code>client_secret</code>，截至日期选择24个月，最后点击“添加”按钮。</p>
<figure data-type="image" tabindex="15"><img src="https://drive.jianrry.com/image/microsoft-azure-register-app4.jpg?raw" alt="" loading="lazy"></figure>
<h2 id="cloudflare-workers">CloudFlare Workers</h2>
<h3 id="step1登陆你的-cloudflare-账号">Step1：登陆你的 CloudFlare 账号</h3>
<p><strong>如果你的域名没有托管在 CloudFlare，请忽略以下的全部内容，直接使用 Heroku 免费提供的二级域名。</strong></p>
<p>打开<a href="https://dash.cloudflare.com/login">官网</a>，登录你的 CloudFlare 账号（如果没有，就注册一个 CloudFlare 账号）。</p>
<figure data-type="image" tabindex="16"><img src="https://drive.jianrry.com/image/cloudflare-sign-in.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step2创建一个-cloudflare-worker">Step2：创建一个 CloudFlare Worker</h3>
<p>依次点击“Workers—管理 Workers—创建 Worker”，创建一个 CloudFlare Worker。</p>
<figure data-type="image" tabindex="17"><img src="https://drive.jianrry.com/image/cloudflare-create-a-worker.jpg?raw" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="18"><img src="https://drive.jianrry.com/image/cloudflare-create-a-worker2.jpg?raw" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="19"><img src="https://drive.jianrry.com/image/cloudflare-create-a-worker3.jpg?raw" alt="" loading="lazy"></figure>
<p>将下面的代码黏贴到左侧的代码区，然后点击“保存并部署”按钮。</p>
<pre><code>addEventListener(
    &quot;fetch&quot;,event =&gt; {
        let url=new URL(event.request.url);     
        url.hostname=&quot;应用名称.herokuapp.com&quot;;  
        let request=new Request(url,event.request);    
        event. respondWith(       
            fetch(request)    
        )  
    }
)
</code></pre>
<p><strong>注意事项：将上面的应用名称改为你的 Heroku 的应用名。</strong></p>
<h3 id="step3添加一个-cloudflare-路由">Step3：添加一个 CloudFlare 路由</h3>
<p>点击“添加路由”按钮，添加一个 CloudFlare 路由。</p>
<figure data-type="image" tabindex="20"><img src="https://drive.jianrry.com/image/cloudflare-add-a-route.jpg?raw" alt="" loading="lazy"></figure>
<p>输入路由规则，选择刚才创建的路由，最后点击“保存”按钮。</p>
<figure data-type="image" tabindex="21"><img src="https://drive.jianrry.com/image/cloudflare-add-a-route2.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step4自定义域名">Step4：自定义域名</h3>
<p>如果你对 CloudFlare 提供的二级域名不满意，可以自定义你的域名，前提是你的域名托管在 CloudFlare。</p>
<p>你可以参考<a href="https://blog.jianrry.com/post/change-namesilo-ns-server-to-cloudflare/">这篇文章</a>，将你的域名托管到 CloudFlare。</p>
<p>然后手动添加 一条 DNS 解析记录，指向 CloudFlare Workers 的三级域名，最后点击&quot;保存&quot;按钮。</p>
<figure data-type="image" tabindex="22"><img src="https://drive.jianrry.com/image/cloudflare-add-a-cname-record-for-route.jpg?raw" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[免费申请 Microsoft 365 E5 开发者订阅]]></title>
        <id>https://blog.jianrry.com/post/join-the-microsoft-365-developer-program/</id>
        <link href="https://blog.jianrry.com/post/join-the-microsoft-365-developer-program/">
        </link>
        <updated>2021-05-12T16:16:52.000Z</updated>
        <summary type="html"><![CDATA[<p>任何人都可以注册成为 Microsoft 开发者，免费申请为期3个月的 Microsoft 365 E5开发者订阅。里面包括了25个用户许可证，可以使用 Office 365的绝大部分功能。</p>
]]></summary>
        <content type="html"><![CDATA[<p>任何人都可以注册成为 Microsoft 开发者，免费申请为期3个月的 Microsoft 365 E5开发者订阅。里面包括了25个用户许可证，可以使用 Office 365的绝大部分功能。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#%E7%94%B3%E8%AF%B7%E8%AE%A2%E9%98%85">申请订阅</a>
<ul>
<li><a href="#step1%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84-microsoft-%E4%B8%AA%E4%BA%BA%E8%B4%A6%E5%8F%B7">Step1：登陆你的 Microsoft 个人账号</a></li>
<li><a href="#step2%E6%B3%A8%E5%86%8C-microsoft-%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7">Step2：注册 Microsoft 开发者账号</a></li>
<li><a href="#step3%E7%94%B3%E8%AF%B7-microsoft-365-e5-%E8%AE%A2%E9%98%85">Step3：申请 Microsoft 365 E5 订阅</a></li>
</ul>
</li>
<li><a href="#%E8%AE%A2%E9%98%85%E7%AE%A1%E7%90%86">订阅管理</a>
<ul>
<li><a href="#step1%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84-microsoft-365-e5-%E7%9A%84%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7">Step1：登陆你的 Microsoft 365 E5 的管理员账号</a></li>
<li><a href="#step2%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7">Step2：添加用户</a></li>
</ul>
</li>
<li><a href="#%E8%B0%83%E6%95%B4%E7%A9%BA%E9%97%B4">调整空间</a></li>
<li><a href="#%E8%87%AA%E5%8A%A8%E7%BB%AD%E8%AE%A2">自动续订</a></li>
</ul>
</li>
</ul>
</p>
<h2 id="申请订阅">申请订阅</h2>
<h3 id="step1登陆你的-microsoft-个人账号">Step1：登陆你的 Microsoft 个人账号</h3>
<p>打开<a href="https://developer.microsoft.com/en-us/office/profile/">Microsoft 开发者页面</a>，登录你的 Microsoft 个人账号（如果没有，就注册一个 Microsoft 账号）。</p>
<figure data-type="image" tabindex="1"><img src="https://drive.jianrry.com/image/microsoft-developer-sign-in.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step2注册-microsoft-开发者账号">Step2：注册 Microsoft 开发者账号</h3>
<p>依次填写你的个人信息，注册 Microsoft 开发者账号。</p>
<figure data-type="image" tabindex="2"><img src="https://drive.jianrry.com/image/join-the-microsoft-365-developer-program.jpg?raw" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://drive.jianrry.com/image/join-the-microsoft-365-developer-program2.jpg?raw" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://drive.jianrry.com/image/join-the-microsoft-365-developer-program3.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step3申请-microsoft-365-e5-订阅">Step3：申请 Microsoft 365 E5 订阅</h3>
<p>点击“SET UP SUBSCRIPTION”，开始申请 Microsoft 365 E5 订阅。</p>
<figure data-type="image" tabindex="5"><img src="https://drive.jianrry.com/image/set-up-subscription.jpg?raw" alt="" loading="lazy"></figure>
<p>依次填写你的个人信息，注册 Microsoft 365 E5 的管理员账号。</p>
<figure data-type="image" tabindex="6"><img src="https://drive.jianrry.com/image/set-up-subscription2.jpg?raw" alt="" loading="lazy"></figure>
<p>添加你的手机号码，然后点击“Send code&quot;。填写收到的验证码之后，最后点击&quot;Set up&quot;。</p>
<figure data-type="image" tabindex="7"><img src="https://drive.jianrry.com/image/set-up-subscription3.jpg?raw" alt="" loading="lazy"></figure>
<h2 id="订阅管理">订阅管理</h2>
<h3 id="step1登陆你的-microsoft-365-e5-的管理员账号">Step1：登陆你的 Microsoft 365 E5 的管理员账号</h3>
<p>打开 <a href="https://admin.microsoft.com/Adminportal/Home">Microsoft 365 管理员中心</a>，登陆你的 你的 Microsoft 365 E5 的管理员账号。</p>
<h3 id="step2添加用户">Step2：添加用户</h3>
<p>依次执行下面的操作，添加一个用户账号。</p>
<p>点击&quot;添加用户&quot;</p>
<figure data-type="image" tabindex="8"><img src="https://drive.jianrry.com/image/microsoft-365-dev-center-add-user.jpg?raw" alt="" loading="lazy"></figure>
<p>设置基本信息</p>
<figure data-type="image" tabindex="9"><img src="https://drive.jianrry.com/image/microsoft-365-dev-center-add-user2.jpg?raw" alt="" loading="lazy"></figure>
<p>分配产品许可证</p>
<figure data-type="image" tabindex="10"><img src="https://drive.jianrry.com/image/microsoft-365-dev-center-add-user3.jpg?raw" alt="" loading="lazy"></figure>
<p>可选设置</p>
<figure data-type="image" tabindex="11"><img src="https://drive.jianrry.com/image/microsoft-365-dev-center-add-user4.jpg?raw" alt="" loading="lazy"></figure>
<p>添加完毕</p>
<figure data-type="image" tabindex="12"><img src="https://drive.jianrry.com/image/microsoft-365-dev-center-add-user5.jpg?raw" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://drive.jianrry.com/image/microsoft-365-dev-center-add-user6.jpg?raw" alt="" loading="lazy"></figure>
<h2 id="调整空间">调整空间</h2>
<p>用户默认的 onedrive 存储空间为 1t，如果你想调整特定用户的存储空间，你可以参考<a href="https://docs.microsoft.com/zh-cn/onedrive/change-user-storage">这篇文章</a>。</p>
<h2 id="自动续订">自动续订</h2>
<p>你只需要在订阅到期之前，多调用几次 Microsoft 365 E5 的 api，就可以实现自动续订。</p>
<p>建议使用 api 搭建一个图床或者网盘，只要有人一直使用，就可以实现无限续订。</p>
<p>你可以参考这篇<a href="https://blog.jianrry.com/post/build-a-personal-netdisc-by-onemanager-and-heroku-and-cloudflare-workers/">文章</a>，OneManager+Heroku+CloudFlare Workers 免费搭建个人网盘。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记录中国银行洛天依借记卡申请过程]]></title>
        <id>https://blog.jianrry.com/post/boc-luotianyi-debit-card/</id>
        <link href="https://blog.jianrry.com/post/boc-luotianyi-debit-card/">
        </link>
        <updated>2021-05-11T13:55:54.000Z</updated>
        <summary type="html"><![CDATA[<p>今天，接到了一个电话，是中国邮政的快递员打来的，原来是我申请的中国银行洛天依借记卡到了，让我本人携带身份证去签收快递。历时一个多月，经历了一波三折，我申请的中国银行洛天依借记卡终于到手了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天，接到了一个电话，是中国邮政的快递员打来的，原来是我申请的中国银行洛天依借记卡到了，让我本人携带身份证去签收快递。历时一个多月，经历了一波三折，我申请的中国银行洛天依借记卡终于到手了。</p>
<!-- more -->
<h2 id="卡面鉴赏">卡面鉴赏：</h2>
<h3 id="正面">正面：</h3>
<figure data-type="image" tabindex="1"><img src="https://drive.jianrry.com/image/boc-luotianyi-debit-card.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="反面">反面：</h3>
<figure data-type="image" tabindex="2"><img src="https://drive.jianrry.com/image/boc-luotianyi-debit-card2.jpg?raw" alt="" loading="lazy"></figure>
<h2 id="申请条件">申请条件：</h2>
<ol>
<li>年满16周岁</li>
<li>需本人身份证件</li>
</ol>
<p>5000个名额已满，申请链接暂时关闭，现在已经无法申请了。</p>
<h2 id="申请流程">申请流程：</h2>
<p>中国银行洛天依借记卡申请链接：<a href="https://cloud.bankofchina.com/sh/html/h5/card/luotianyi_ad.html">https://cloud.bankofchina.com/sh/html/h5/card/luotianyi_ad.html</a></p>
<p>打开上面的链接，选择立即办卡后，上传身份证正反面和个人照片，完成信息登记，验证手机号之后，就完成了网上申请了。</p>
<h2 id="查询办理状态">查询办理状态：</h2>
<p>中国银行借记卡进度查询：<a href="https://cloud.bankofchina.com/sh/html/h5/card/search.html">https://cloud.bankofchina.com/sh/html/h5/card/search.html</a></p>
<p>打开上面的链接，输入办卡人的姓名和身份证号就可以查询了。</p>
<p>下面是我的办卡进度，历时一个多月才到手，你可以参考一下。</p>
<p>2021.04.09 开始申请</p>
<p>2021.04.16 已受理</p>
<p>通过审批</p>
<p>2021.04.29 已开卡</p>
<p>制卡中</p>
<p>2021.05.07 已寄发</p>
<p>2021.05.11 快递签收</p>
<h2 id="卡片激活">卡片激活：</h2>
<p>收到借记卡后，必须本人携带本人身份证到附近的中国银行网点进行激活，不能通过电话激活。</p>
<p>步骤如下：</p>
<ol>
<li>修改卡片的初始密码（初始密码是你的身份证后七位，从倒数第七位到倒数第二位，不包含倒数第一位）。</li>
<li>向卡内存款激活卡片（没有存钱的金额限制，到柜员机随便存一笔钱进去就行）。</li>
</ol>
<h2 id="注意事项">注意事项：</h2>
<ol>
<li>洛天依借记卡申请有名额限制，最多5000个名额，建议尽快申请。审批没通过，还可以继续申请，直到通过为止。</li>
<li>邮寄地址必须精确到 xx 号、xx 室，而且不能使用标点符号（我因为使用了括号进行备注，第一次审批就没有通过）。</li>
<li>个人照片必须使用你的自拍照，其他照片不行（我因为使用了登记照，结果第二次审批又没有通过）。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker Compose 运行 ArchiSteamFarm]]></title>
        <id>https://blog.jianrry.com/post/docker-compose-asf/</id>
        <link href="https://blog.jianrry.com/post/docker-compose-asf/">
        </link>
        <updated>2021-05-06T16:54:33.000Z</updated>
        <summary type="html"><![CDATA[<p>你可以使用我的 Docker Compose文件，只需要修改少量的配置，花费10分钟不到就可以在服务器或者本机上运行 ArchiSteamFarm。</p>
]]></summary>
        <content type="html"><![CDATA[<p>你可以使用我的 Docker Compose文件，只需要修改少量的配置，花费10分钟不到就可以在服务器或者本机上运行 ArchiSteamFarm。</p>
<!-- more -->
<h2 id="特性">特性：</h2>
<ol>
<li>自动签发 SSL 证书，证书到期后自动续期</li>
<li>HTTP 强制跳转到 HTTPS</li>
<li>自动开启 IPC 服务，可以通过 IPC 面板管理</li>
</ol>
<h2 id="概述">概述：</h2>
<p>一共有2个版本：Caddy 和 Nginx。它们在功能上基本上没有区别，推荐使用 Caddy 版本。</p>
<h3 id="caddy-版本">Caddy 版本：</h3>
<pre><code>├ docker-compose.yml	        
│  
├─asf											
│  ├─config											
│  │      ASF.json								
│  │      IPC.config
│  │      bot.json
│  │      bot.maFile
│  │      
│  ├─logs
│  └─plugins
├
└─caddy
    │  Caddyfile
    │  
    ├─logs
    └─srv

docker-compose.yml：docker compose的配置文件

asf：asf的文件夹

	config：asf的配置文件夹

		ASF.json：ASF的配置文件

		IPC.config：ASF的IPC配置文件

		bot.json：ASF的机器人配置文件

		bot.maFile：ASF的机器人令牌文件
		
	logs：asf的日志文件夹
	
	plugins：asf的插件文件夹
		
caddy：caddy的文件夹

Caddyfile：caddy的配置文件

logs：caddy的日志文件夹

srv：caddy的站点文件夹
</code></pre>
<h3 id="nginx-版本">Nginx 版本：</h3>
<pre><code>├ docker-compose.yml
│  
├─acme.sh
├
├─asf											
│  ├─config											
│  │      ASF.json								
│  │      IPC.config
│  │      bot.json
│  │      bot.maFile
│  │      
│  ├─logs
│  └─plugins
├
└─nginx
    ├─config
    │      asf.domain.com.conf
    │      
    ├─logs
    └─srv
	
docker-compose.yml：docker compose的配置文件

acme.sh：acme的证书文件夹

asf：asf的文件夹

	config：asf的配置文件夹

		ASF.json：ASF的配置文件

		IPC.config：ASF的IPC配置文件

		bot.json：ASF的机器人配置文件

		bot.maFile：ASF的机器人令牌文件
		
	logs：asf的日志文件夹
	
	plugins：asf的插件文件夹
		
nginx：nginx的文件夹

	config：nginx的配置文件夹
	
		asf.domain.com.conf 站点配置文件
		
	logs：nginx的日志文件夹
	
	srv：nginx的站点文件夹
</code></pre>
<h2 id="安装">安装</h2>
<h3 id="step1安装-docker">Step1：安装 Docker</h3>
<p>海外地区：</p>
<pre><code> curl -fsSL https://get.docker.com -o get-docker.sh
 sudo sh get-docker.sh
</code></pre>
<p>中国大陆地区：</p>
<pre><code>curl -sSL https://get.daocloud.io/docker | sh
curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io
</code></pre>
<h3 id="step2安装-docker-compose">Step2：安装 Docker Compose</h3>
<p>海外地区：</p>
<pre><code> sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose

 sudo chmod +x /usr/local/bin/docker-compose
</code></pre>
<p>中国大陆地区：</p>
<pre><code>curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose

chmod +x /usr/local/bin/docker-compose
</code></pre>
<h3 id="step3下载文件然后解压">Step3：下载文件，然后解压</h3>
<p>GitHub：<a href="https://github.com/jianrry/docker-compose-asf">https://github.com/jianrry/docker-compose-asf</a></p>
<p>Caddy 版本：<a href="https://github.com/jianrry/docker-compose-asf/releases/download/1.0.0/caddy.zip">https://github.com/jianrry/docker-compose-asf/releases/download/1.0.0/caddy.zip</a></p>
<p>Nginx 版本：<a href="https://github.com/jianrry/docker-compose-asf/releases/download/1.0.0/nginx.zip">https://github.com/jianrry/docker-compose-asf/releases/download/1.0.0/nginx.zip</a></p>
<h3 id="step4修改配置文件">Step4：修改配置文件</h3>
<p>Caddy 版本：</p>
<ol>
<li>将 <code>docker-compose.yml</code> 中的 CloudFlare 账号的电子邮箱和 API 密钥修改为你自己的。</li>
<li>将 <code>caddy/Caddyfile</code> 中的域名修改为你自己的。</li>
<li>将 <code>asf/config</code> 中的 <code>ASF.json</code>、<code>bot.json</code>、<code>bot.maFile</code> 修改为你自己的。</li>
</ol>
<p>Nginx 版本：</p>
<ol>
<li>将 <code>docker-compose.yml</code> 中的 CloudFlare 账号的电子邮箱和 API 密钥修改为你自己的。</li>
<li>将 <code>nginx/config</code> 中的 <code>asf.domain.conf</code> 重命名，然后将其中的域名修改为你自己的。</li>
<li>将 <code>asf/config</code> 中的 <code>ASF.json</code>、<code>bot.json</code>、<code>bot.maFile</code> 修改为你自己的。</li>
</ol>
<h3 id="step5创建容器然后启动">Step5：创建容器，然后启动</h3>
<p>将文件上传到服务器上后，进入 <code>docker-compose.yml</code> 的所在目录。</p>
<p>Caddy 版本：</p>
<pre><code>docker-compose up
</code></pre>
<p>Nginx 版本：</p>
<pre><code>sudo docker-compose run acme.sh --issue --dns dns_cf -d asf.domain.com

docker-compose up
</code></pre>
<h2 id="常用命令">常用命令</h2>
<p>构建镜像，并启动服务：</p>
<pre><code>docker-compose up
</code></pre>
<p>查询实时日志：</p>
<pre><code>docker-compose logs service_name
</code></pre>
<p>停止服务：</p>
<pre><code>docker-compose stop service_name
</code></pre>
<p>启动服务：</p>
<pre><code>docker-compose start service_name
</code></pre>
<p>删除服务：</p>
<pre><code>docker-compose rm service_name
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 安装 Docker Compose]]></title>
        <id>https://blog.jianrry.com/post/install-docker-compose-on-linux/</id>
        <link href="https://blog.jianrry.com/post/install-docker-compose-on-linux/">
        </link>
        <updated>2021-05-05T16:12:37.000Z</updated>
        <summary type="html"><![CDATA[<p>这篇文章介绍了如何在 Linux 上安装 Docker Compose。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这篇文章介绍了如何在 Linux 上安装 Docker Compose。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#%E5%AE%89%E8%A3%85">安装</a>
<ul>
<li><a href="#%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F%E6%BA%90">官方镜像源</a></li>
<li><a href="#daocloud-%E9%95%9C%E5%83%8F%E6%BA%90">DaoCloud 镜像源</a></li>
</ul>
</li>
<li><a href="#%E5%8D%B8%E8%BD%BD">卸载</a></li>
</ul>
</li>
</ul>
</p>
<h2 id="安装">安装</h2>
<h3 id="官方镜像源">官方镜像源</h3>
<p>你可以从官方镜像源下载安装 Docker Compose，推荐中国大陆之外地区的用户使用。</p>
<pre><code> sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose

 sudo chmod +x /usr/local/bin/docker-compose
</code></pre>
<p>你可以通过修改URL中的版本，可以自定义您想要下载安装的 Docker Compose 版本。</p>
<h3 id="daocloud-镜像源">DaoCloud 镜像源</h3>
<p>你还可以从 DaoCloud 镜像源下载安装 Docker Compose，仅推荐中国大陆地区的用户使用。</p>
<pre><code>curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose

chmod +x /usr/local/bin/docker-compose
</code></pre>
<h2 id="卸载">卸载</h2>
<p>只需要删除下载的 Docker Compose 文件即可。</p>
<pre><code>sudo rm /usr/local/bin/docker-compose
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 安装 Docker Engine]]></title>
        <id>https://blog.jianrry.com/post/install-docker-engine-on-ubuntu/</id>
        <link href="https://blog.jianrry.com/post/install-docker-engine-on-ubuntu/">
        </link>
        <updated>2021-05-05T15:28:42.000Z</updated>
        <summary type="html"><![CDATA[<p>这篇文章介绍了如何在 Ubuntu 上安装 Docker Engine。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这篇文章介绍了如何在 Ubuntu 上安装 Docker Engine。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#%E7%B3%BB%E7%BB%9F%E8%A6%81%E6%B1%82">系统要求</a></li>
<li><a href="#%E5%AE%89%E8%A3%85">安装</a>
<ul>
<li><a href="#%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F%E6%BA%90">官方镜像源</a></li>
<li><a href="#daocloud-%E9%95%9C%E5%83%8F%E6%BA%90">DaoCloud 镜像源</a></li>
</ul>
</li>
<li><a href="#%E9%85%8D%E7%BD%AE-docker-%E9%95%9C%E5%83%8F%E7%AB%99">配置 Docker 镜像站</a></li>
<li><a href="#%E5%8D%B8%E8%BD%BD">卸载</a></li>
</ul>
</li>
</ul>
</p>
<h2 id="系统要求">系统要求</h2>
<p>Docker Engine 支持以下的 Ubuntu 版本：</p>
<ul>
<li>Ubuntu Hirsute 21.04</li>
<li>Ubuntu Groovy 20.10</li>
<li>Ubuntu Focal 20.04 (LTS)</li>
<li>Ubuntu Bionic 18.04 (LTS)</li>
<li>Ubuntu Xenial 16.04 (LTS)</li>
</ul>
<p>Docker Engine 支持 x86_64 (或 amd64 ), armhf, 以及 arm64 架构。</p>
<h2 id="安装">安装</h2>
<h3 id="官方镜像源">官方镜像源</h3>
<p>你可以从官方镜像源下载安装 Docker Engine，推荐中国大陆之外地区的用户使用。</p>
<pre><code> curl -fsSL https://get.docker.com -o get-docker.sh
 sudo sh get-docker.sh
</code></pre>
<h3 id="daocloud-镜像源">DaoCloud 镜像源</h3>
<p>你还可以从 DaoCloud 镜像源下载安装 Docker Engine，仅推荐中国大陆地区的用户使用。</p>
<pre><code>curl -sSL https://get.daocloud.io/docker | sh
</code></pre>
<h2 id="配置-docker-镜像站">配置 Docker 镜像站</h2>
<p>因为 Docker Hub 在国内的访问速度不理想，你可以通过配置 Docker 镜像站加快访问速度，仅推荐中国大陆地区的用户使用。</p>
<pre><code>curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io
</code></pre>
<p>该脚本可以将 --registry-mirror 加入到你的 Docker 配置文件 /etc/docker/daemon.json 中。适用于 Ubuntu14.04、Debian、CentOS6 、CentOS7、Fedora、Arch Linux、openSUSE Leap 42.1，其他版本可能有细微不同。更多详情请访问文档。</p>
<h2 id="卸载">卸载</h2>
<p>卸载 Docker Engine</p>
<pre><code>sudo apt-get purge docker-ce docker-ce-cli containerd.io
</code></pre>
<p>卸载完成之后，镜像、容器、存储卷、自定义配置文件不会自动删除。你可以执行下面的命令，手动删除它们</p>
<pre><code> sudo rm -rf /var/lib/docker
 sudo rm -rf /var/lib/containerd
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea+GitHub+CloudFlare Page 免费搭建个人博客]]></title>
        <id>https://blog.jianrry.com/post/build-a-personal-blog-by-gridea-and-github-and-cloudflare-page/</id>
        <link href="https://blog.jianrry.com/post/build-a-personal-blog-by-gridea-and-github-and-cloudflare-page/">
        </link>
        <updated>2021-05-04T14:56:14.000Z</updated>
        <summary type="html"><![CDATA[<p>Gridea 是一个静态博客写作客户端，你可以通过 Gridea 写作（支持 MarkDown 语法），然后将文章发布到任何静态站点上（支持 GitHub Pages 和 Coding Pages 以及 SFTP），最后通过 CloudFlare Page 加速访问，从而免费搭建一个自己的博客。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Gridea 是一个静态博客写作客户端，你可以通过 Gridea 写作（支持 MarkDown 语法），然后将文章发布到任何静态站点上（支持 GitHub Pages 和 Coding Pages 以及 SFTP），最后通过 CloudFlare Page 加速访问，从而免费搭建一个自己的博客。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#github">GitHub</a>
<ul>
<li><a href="#step1%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84-github-%E8%B4%A6%E5%8F%B7">Step1：登陆你的 GitHub 账号</a></li>
<li><a href="#step2%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E4%BB%93%E5%BA%93">Step2：新建一个新的仓库</a></li>
<li><a href="#step3-%E7%94%B3%E8%AF%B7%E4%B8%80%E4%B8%AA-token">Step3: 申请一个 Token</a></li>
</ul>
</li>
<li><a href="#cloudflare-page">CloudFlare Page</a>
<ul>
<li><a href="#step1%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84-cloudflare-%E8%B4%A6%E5%8F%B7">Step1：登陆你的 CloudFlare 账号</a></li>
<li><a href="#step2%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-cloudflare-pages-%E9%A1%B9%E7%9B%AE">Step2：创建一个 CloudFlare Pages 项目</a></li>
<li><a href="#step3%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA-github-%E4%BB%93%E5%BA%93">Step3：选择一个 GitHub 仓库</a></li>
<li><a href="#step4%E6%9E%84%E5%BB%BA%E5%92%8C%E9%83%A8%E7%BD%B2">Step4：构建和部署</a></li>
<li><a href="#step5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D">Step5：自定义域名</a></li>
</ul>
</li>
<li><a href="#gridea">Gridea</a>
<ul>
<li><a href="#step1%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85-gridea">Step1：下载并安装 Gridea</a></li>
<li><a href="#step2%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E9%93%BE%E6%8E%A5">Step2：配置远程链接</a></li>
<li><a href="#step3-%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA">Step3: 开启评论</a></li>
<li><a href="#step4%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%98%E5%8E%9F">Step4：备份和还原</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h2 id="github">GitHub</h2>
<h3 id="step1登陆你的-github-账号">Step1：登陆你的 GitHub 账号</h3>
<p>打开<a href="https://github.com/login">官网</a>，登录你的 GitHub 账号（如果没有，就注册一个 GitHub 账号）。</p>
<figure data-type="image" tabindex="1"><img src="https://drive.jianrry.com/image/github-sign-in.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step2新建一个新的仓库">Step2：新建一个新的仓库</h3>
<p>点击<a href="https://github.com/new">此处</a>，创建一个新的公开仓库，用于存放网站文件。</p>
<figure data-type="image" tabindex="2"><img src="https://drive.jianrry.com/image/github-create-a-new-repository.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step3-申请一个-token">Step3: 申请一个 Token</h3>
<p>点击<a href="https://github.com/settings/tokens/new">此处</a>，申请一个 Token，用于推送网站文件到 GitHub。</p>
<p>申请 Token时，<strong>记得勾选上仓库相关的全部权限</strong>。</p>
<p>一旦 Token 生成后，<strong>建议保存到本地</strong>，因为 Token 只显示一次。</p>
<figure data-type="image" tabindex="3"><img src="https://drive.jianrry.com/image/github-generate-new-token.jpg?raw" alt="" loading="lazy"></figure>
<h2 id="cloudflare-page">CloudFlare Page</h2>
<h3 id="step1登陆你的-cloudflare-账号">Step1：登陆你的 CloudFlare 账号</h3>
<p>打开<a href="https://dash.cloudflare.com/login">官网</a>，登录你的 CloudFlare 账号（如果没有，就注册一个 CloudFlare 账号）。</p>
<figure data-type="image" tabindex="4"><img src="https://drive.jianrry.com/image/cloudflare-sign-in.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step2创建一个-cloudflare-pages-项目">Step2：创建一个 CloudFlare Pages 项目</h3>
<p>点击<a href="https://dash.cloudflare.com/sign-up/pages">此处</a>，创建一个 CloudFlare Pages 项目</p>
<figure data-type="image" tabindex="5"><img src="https://drive.jianrry.com/image/cloudflare-create-a-cloudflare-pages-project.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step3选择一个-github-仓库">Step3：选择一个 GitHub 仓库</h3>
<p>然后选择一个 GitHub 仓库，选中上文中的 GitHub 仓库。</p>
<figure data-type="image" tabindex="6"><img src="https://drive.jianrry.com/image/cloudflare-choose-a-github-repository.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step4构建和部署">Step4：构建和部署</h3>
<p>建议保存默认，点击“保存并部署”，进入到下一步。</p>
<figure data-type="image" tabindex="7"><img src="https://drive.jianrry.com/image/cloudflare-build-a-cloudflare-pages-project.jpg?raw" alt="" loading="lazy"></figure>
<p>部署成功后，你可以通过 CloudFlare 提供的二级域名，访问你的博客。</p>
<figure data-type="image" tabindex="8"><img src="https://drive.jianrry.com/image/cloudflare-build-a-cloudflare-pages-project-success.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step5自定义域名">Step5：自定义域名</h3>
<p>如果你对 CloudFlare 提供的二级域名不满意，可以自定义你的域名，前提是你的域名托管在 CloudFlare。</p>
<p>你可以参考<a href="https://blog.jianrry.com/post/change-namesilo-ns-server-to-cloudflare/">这篇文章</a>，将你的域名托管到 CloudFlare。</p>
<figure data-type="image" tabindex="9"><img src="https://drive.jianrry.com/image/cloudflare-custom-a-domain-for-cloudflare-pages.jpg?raw" alt="" loading="lazy"></figure>
<p>然后确认新的 DNS 记录，CloudFlare 会自动添加一条 DNS 记录指向 CloudFlare Pages 提供的二级域名。</p>
<figure data-type="image" tabindex="10"><img src="https://drive.jianrry.com/image/cloudflare-confirm-a-dns-record-for-cloudflare-pages.jpg?raw" alt="" loading="lazy"></figure>
<p>如果确认失败，就手动添加一条 cname 记录，然后重新自定义域名即可。你可以参考<a href="https://blog.jianrry.com/post/cloudflare-beginner-guide/">这篇文章</a>，添加一条 cname 记录。</p>
<h2 id="gridea">Gridea</h2>
<h3 id="step1下载并安装-gridea">Step1：下载并安装 Gridea</h3>
<p>打开<a href="https://gridea.dev/">官网</a>，下载对应平台的安装包，并安装到你的操作系统上。</p>
<figure data-type="image" tabindex="11"><img src="https://drive.jianrry.com/image/gridea-cover-picture.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step2配置远程链接">Step2：配置远程链接</h3>
<p>打开“Gridea—远程—基础设置”，按照下图的示例进行设置，然后点击「检测远程链接」，进行配置检查。</p>
<p>如果没有检查出问题，就点击“保存”按钮进行保存。</p>
<figure data-type="image" tabindex="12"><img src="https://drive.jianrry.com/image/gridea-remote-setting.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step3-开启评论">Step3: 开启评论</h3>
<p>Gridea 支持 gitalk 和 disqusjs 评论系统，你可以选择其中之一作为你博客的评论系统。</p>
<p>你可以参考以下的官方文档，打开“Gridea—远程—评论设置”，修改一下配置，就可以评论了。</p>
<p><a href="https://github.com/gitalk/gitalk">gitalk</a></p>
<p><a href="https://github.com/SukkaW/DisqusJS">disqusjs</a></p>
<h3 id="step4备份和还原">Step4：备份和还原</h3>
<p>点击左下角的图标，进入到备份页面，就可以看到博客源文件夹了。你只需要将文件夹上传到网盘，推荐使用onedrive，就可以实现备份了。</p>
<figure data-type="image" tabindex="13"><img src="https://drive.jianrry.com/image/gridea-backup-setting.jpg?raw" alt="" loading="lazy"></figure>
<p>同理，如果你想要还原，只需要下载博客源文件夹到本地。然后进入到备份页面，重新设置一下博客源文件夹的目录就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudFlare 域名解析 CDN加速教程]]></title>
        <id>https://blog.jianrry.com/post/cloudflare-beginner-guide/</id>
        <link href="https://blog.jianrry.com/post/cloudflare-beginner-guide/">
        </link>
        <updated>2021-05-03T15:08:12.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://blog.jianrry.com/post/change-namesilo-ns-server-to-cloudflare/">上一篇文章</a>介绍了如何使用 CloudFlare 托管你的网站，接下来介绍如何使用 CloudFlare 进行域名解析和 CDN 加速。</p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://blog.jianrry.com/post/change-namesilo-ns-server-to-cloudflare/">上一篇文章</a>介绍了如何使用 CloudFlare 托管你的网站，接下来介绍如何使用 CloudFlare 进行域名解析和 CDN 加速。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90">域名解析</a>
<ul>
<li><a href="#step1%E7%99%BB%E9%99%86%E4%BD%A0%E7%9A%84-cloudflare-%E8%B4%A6%E5%8F%B7">Step1：登陆你的 CloudFlare 账号</a></li>
<li><a href="#step2%E6%89%93%E5%BC%80%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99">Step2：打开你的网站</a></li>
<li><a href="#step3%E6%89%93%E5%BC%80-dns-%E7%AE%A1%E7%90%86">Step3：打开 DNS 管理</a></li>
<li><a href="#step4%E6%B7%BB%E5%8A%A0-dns-%E8%A7%A3%E6%9E%90">Step4：添加 DNS 解析</a></li>
</ul>
</li>
<li><a href="#cdn-%E5%8A%A0%E9%80%9F">CDN 加速</a>
<ul>
<li><a href="#%E6%9C%AA%E5%8A%A0%E9%80%9F">未加速</a></li>
<li><a href="#%E5%B7%B2%E5%8A%A0%E9%80%9F">已加速</a></li>
<li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h2 id="域名解析">域名解析</h2>
<h3 id="step1登陆你的-cloudflare-账号">Step1：登陆你的 CloudFlare 账号</h3>
<p>打开<a href="https://dash.cloudflare.com/login">官网</a>，登录你的 CloudFlare 账号（如果没有，就注册一个 CloudFlare 账号）。</p>
<figure data-type="image" tabindex="1"><img src="https://drive.jianrry.com/image/cloudflare-sign-in.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step2打开你的网站">Step2：打开你的网站</h3>
<p>登录你的 CloudFlare 账号，打开你想要解析的网站。</p>
<figure data-type="image" tabindex="2"><img src="https://drive.jianrry.com/image/cloudflare-choose-your-website.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step3打开-dns-管理">Step3：打开 DNS 管理</h3>
<p>然后点击“DNS”按钮，进入 DNS 管理。</p>
<figure data-type="image" tabindex="3"><img src="https://drive.jianrry.com/image/cloudflare-dns-manage.jpg?raw" alt="" loading="lazy"></figure>
<h3 id="step4添加-dns-解析">Step4：添加 DNS 解析</h3>
<p>以jianrry.com为例：</p>
<p>A记录：</p>
<figure data-type="image" tabindex="4"><img src="https://drive.jianrry.com/image/cloudflare-a-record.jpg?raw" alt="" loading="lazy"></figure>
<p>AAAA记录：</p>
<figure data-type="image" tabindex="5"><img src="https://drive.jianrry.com/image/cloudflare-aaaa-record.jpg?raw" alt="" loading="lazy"></figure>
<p>CNAME记录：</p>
<figure data-type="image" tabindex="6"><img src="https://drive.jianrry.com/image/cloudflare-cname-record.jpg?raw" alt="" loading="lazy"></figure>
<p>MX记录：</p>
<p>MX记录是邮件交换记录，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。经常用于申请域名邮箱，这里不作介绍，更多请参考 http://service.oray.com/question/172.html</p>
<p>TXT记录：</p>
<p>TXT记录，一般指为某个主机名或域名设置的说明。经常用于设置邮箱的反垃圾信息和验证域名的所有权，这里不作介绍，更多请参考 http://service.oray.com/question/566.html</p>
<p>SRV记录：</p>
<p>SRV记录，一般是为Microsoft的活动目录设置时的应用。基本上不会用到，这里不作介绍，更多请参考 http://service.oray.com/question/192.html</p>
<p>CAA记录：</p>
<p>CAA记录，一般用来防止域名证书的劫持。基本上不会用到，这里不作介绍，更多请参考 https://help.aliyun.com/document_detail/65537.html</p>
<p><strong>DNS解析不是及时生效的，需要等待一段时间。一般情况下，30分钟左右才会生效。</strong></p>
<h2 id="cdn-加速">CDN 加速</h2>
<h3 id="未加速">未加速</h3>
<p>进入到 DNS 管理，切换代理状态，就可以使用 CDN 加速。</p>
<figure data-type="image" tabindex="7"><img src="https://drive.jianrry.com/image/cloudflare-a-record-without-cdn.jpg?raw" alt="" loading="lazy"></figure>
<p>代理状态为“仅限DNS”，则说明没有使用 CDN 加速。</p>
<h3 id="已加速">已加速</h3>
<figure data-type="image" tabindex="8"><img src="https://drive.jianrry.com/image/cloudflare-a-record-with-cdn.jpg?raw" alt="" loading="lazy"></figure>
<p>代理状态为“已代理”，则说明已经了使用 CDN 加速。</p>
<h3 id="注意事项">注意事项</h3>
<p>因为某些众所周知的原因，CloudFlare 的 CDN 加速效果在中国大陆并不理想，甚至可能导致网站在中国大陆的访问速度变慢。</p>
<p>如果你的网站的目标群体是中国大陆的访客，建议使用 CloudFlare 在国内的合作伙伴（京东智联云）或者 国内的 CDN 服务商提供的 CDN 加速服务。</p>
<p>如果你想使用国内的 CDN 加速服务，你的网站则必须完成备案，所以我放弃了使用国内的 CDN 加速服务。</p>
]]></content>
    </entry>
</feed>